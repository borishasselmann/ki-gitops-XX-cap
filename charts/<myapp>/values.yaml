# Default values for <myapp>.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginxinc/nginx-unprivileged
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

  # This block enables and configures External Secrets integration
externalSecrets:
  # Enables the creation of an ExternalSecret resource.
  enabled: false

  # Configuration for the ExternalSecret to fetch and manage Kubernetes secrets from external backends.
  externalSecret:
    # The name of the ExternalSecret resource.
    name: ""

    # Reference to the SecretStore or ClusterSecretStore that defines how to access the external secrets backend.
    secretStoreName: ""
    # Type of the secret store. Must be either "SecretStore" or "ClusterSecretStore".
    secretStoreKind: "ClusterSecretStore"

    # How frequently the ExternalSecret controller should refresh the secret from the external source.
    # Examples: "1h", "30m", "5s"
    refreshInterval: "1h"

    # Target Kubernetes secret that will be created or updated with the data from the external source.
    targetName: ""

    # Policy that defines what to do if the target secret exists. Options: 'Owner', 'Merge', 'None'
    creationPolicy: "Owner"

    # Policy that defines what to do with the target secret when the ExternalSecret is deleted. Options: 'Retain', 'Delete'
    deletionPolicy: "Retain"

    # A list of key mappings from the external backend to Kubernetes secret keys.
    # Each item should define a `secretKey` (the name inside the K8s secret),
    # and a `remoteKey` (the key in the external backend), with optional decoding.
    data:
      # - secretKey: MY_SECRET_KEY
      #   remoteKey: my-secret-key
      #   decodingStrategy: None


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Environment variables to pass to the container.
# Each item should have a 'name' and a 'value'.
# For more complex use cases (e.g., from configMapKeyRef or secretKeyRef), use full object syntax.
env: []
# Example:
# env:
#   - name: ENVIRONMENT
#     value: "production"
#   - name: API_KEY
#     valueFrom:
#       secretKeyRef:
#         name: my-secret
#         key: api-key

nodeSelector: {}

tolerations: []

affinity: {}
